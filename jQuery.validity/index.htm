<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
    <head>
        <script type="text/javascript" src="jquery.js"></script>
        <script type="text/javascript" src="jquery.validity.js"></script>
        <script type="text/javascript">
            function switchOutputs(){
                if($.validity.settings.outputMode == "MODAL"){
                    $.validity.setup({outputMode:"Summary"});
                    $('#SwitchLink').html('Change From Summary to Modal');
                }
                else{
                    $.validity.setup({outputMode:"Modal"});
                    $('#SwitchLink').html('Change From Modal to Summary');
                }
                
                $('.validity-modal-msg').remove();
                $('#validity-summary-container').hide();
                $('#validity-summary-output').html("");
                $('.validity-erroneous').removeClass('validity-erroneous');
            }

            function validatePassword(){
                $.validity.start();
                $("input[type='password']").areEqual('Error: Passwords do not match.');
                $.validity.end();
            }
        </script>
        
        <link rel="Stylesheet" type="text/css" href="jquery.validity.css" />
        <style type="text/css">
            body {
            	font-family:Arial,Helvetica,Sans-Serif;
            	padding:0;
            	margin:0;
            	background-color:#555;
            	font-size:smaller;}
            
            #main { width:1000px; background-color:#bbb; padding:10px; margin: 20px; }
            
            #validity-summary-container { border:solid 1px #f56600; }
        </style>
        
        <title>jQuery.validity Demo</title>
    </head>
    <body>
        <div id='main'>
            <h1>jQuery.validity Demo</h1>
            <h2>Overview:</h2>
            <!--<p>
                <i>validity</i> is a flexible, platform-agnostic clientside validation framework implemented as a jQuery plugin.
                Instead of balancing a complex validation tool built into your web-framework to validate on both the client and 
                the server, why not do the clientside validation in a clientside language and the serverside validation in a 
                serverside language? Enter <i>validity</i>, a cross-browser clientside validation tool tailored to the nuances
                of a webpage's structure. 
            </p>
            <p>
                <i>validity</i> makes use of jQuery's selector engine to perform safe validation on groups of inputs based on 
                CSS selectors rather than on explicit elements. This means that <i>validity</i> is most effective in pages where 
                the inputs which are displayed, and the datatypes those inputs should accept are dynamic. Validation functions
                are also fairly declarative and English-like, making validation easy to write and debug. Additionally, 
                <i>validity</i> is agnostic of the web-framework being used. It is equally adept in ASP.NET, Rails, PHP and JSP 
                environments.
            </p>-->
            <h2>Output Mode:</h2>
            <p>
                <i>validity</i> has four 'Output Modes': 'Modal', 'Summary', 'None' and 'Custom'. You will select the output
                mode that is most appropriate for your application, or write your own with the custom output.
                Below, the error summary will appear if an error is encountered and the outputMethod is set to 'Summary'.
                [<a id="SwitchLink" href="#x" onclick="switchOutputs()">Change From Modal To Summary</a>]
            </p>
            <div id="validity-modal-output"></div>
            <div id="validity-summary-container">
                <ul id="validity-summary-output"></ul>
            </div>
            <h2>Requiring Fields:</h2>
            <p>
                Below is a required field. For this demo, its id attribute is set to be 'req'. We validate it with the code:
            </p>
            <pre>
                $.validity.start();
                $('#req').require('Error: A Name Is Required.');
                var result = $.validity.end();
                // 'result.valid' now contains a boolean representing whether the input passed validation.
            </pre>
            <p>
                Enter Your Name:<input type="text" id='req' name='req' />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#req').require('Error: A Name Is Required.');$.validity.end();" />
            </p>
            <h2>Format Validation:</h2>
            <p>
                Fields can be validated to match a regular expression format using the Match method. The following input is 
                validated to only accept either an integer or nothing with the following code:
            </p>
            <pre>
                $.validity.start();
                $('#qty1').match('Error: Quantity Must Be Formatted as an Integer.', /^\d*$/);
                var result = $.validity.end();
            </pre>
            <p>
                Optional: Enter Quantity:<input type="text" id='qty1' name='qty1' />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#qty1').match('Error: Quantity Must Be Formatted as an Integer.', /^\d*$/);$.validity.end();" />
            </p>
            <h2>Chaining:</h2>
            <p>
                You can chain... blah blah blah...
            </p>
            <pre>
                $.validity.start();
                $('#qty2')
                    .require('Error: A Name Is Required.')
                    .match('Error: Quantity Must Be Formatted as an Integer.', /^\d*$/);
                var result = $.validity.end();
            </pre>
            <p>
                Required: Enter Quantity: <input type="text" id="qty2" name="qty2" />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#qty2').require('Error: A Name Is Required.').match('Error: Quantity Must Be Formatted as an Integer.', /^\d*$/);$.validity.end();" />
            </p>
            <h2>Equality:</h2>
            <p>
                Often, in account registration scenarios, we must check for the eqality of more than one input such as ensuring that a password
                matches its confirmation field. We can do this validation with a jQuery selector that returns all the fields which must be equal
                (in this case only two) and call the AreEqual method. Observe:
            </p>
            <pre>
                $.validity.start();
                $("input[type='password']").areEqual('Error: Passwords do not match.');
                var result = $.validity.end();
            </pre>
            <p>
                Password:
                <input type="password" id="Pass" name="Pass" />
                Confirm Password:
                <input type="password" id="PassConf" name="PassConf" />
                <input type="button" value="Validate These Fields!" onclick="validatePassword();" />
            </p>
            <h2>Uniqueness:</h2>
            <p>
                The converse to the areEqual method - where no two matched elements have different values - the areNotEqual method will 
                validate that no two elements have the same value. This is useful in situations where repeat values are not allowed. (It
                should be noted that fields where no value is entered will be ignored.) We validate this in much the same way as the 
                AreEqual:
            </p>
            <pre>
                $.validity.start();
                $('input.Name').distinct('Error: A name was repeated.');
                var result = $.validity.end();
            </pre>
            <p>
                Enter Names: 
                <input id="u1" type="text" class="Name" />&nbsp;
                <input id="u2" type="text" class="Name" />&nbsp;
                <input id="u3" type="text" class="Name" />&nbsp;
                <input id="u4" type="text" class="Name" />&nbsp;
                <input type="button" value="Validate These Fields!" onclick="$.validity.start();$('input.Name').distinct('Error: A name was repeated.');$.validity.end();" />
            </p>
        </div>
    </body>
</html>
