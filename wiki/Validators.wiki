#summary A Summary of validity's validator functions and their usage.

= Introduction =

As we've seen in the GettingStarted page, we can call validator methods on jQuery objects and can also chain those methods in order of importance.

Now we will explore each of the methods in greater detail.

= Require =
====Signature: `jQuery.require( ['message'] )` Returns: jQuery====

===Arguments===
  * `message`: An optional message to display if an element fails.

===Overview===
This is the most basic validation method. It merely checks to ensure that inputs have values. If any do not have a value (i.e. `value.length` is zero) an error is raised for that input and the form will not be submitted. 

Notably, an input that contains only whitespace will pass this validator. If whitespace should be treated as a non-value a `match` validator can be used.

===Examples===
{{{
// Require all inputs, with default error messages.
$("input[type='text']").require();
}}}
{{{
// A specific error message is attached to a specific input.
$("#ssn").require("Your Social Sequrity Number is required to proceed.");
}}}

=Match=
====Signature: `jQuery.match( 'patternName'|RegExp, ['message'] )` Returns: jQuery====

===Arguments===
  * `format`: A named pattern to match against. A list of the named formats that are built into `validity` can be found below.
  * `RegExp`: Instead of a named pattern, you may enter a RegExp object to use for testing the value.
  * `message`: An optional message to display if an element fails.

===Overview===
Tests that the inputs conform to the specified format. This is achieved by passing in a RegExp to match the value against. _validity_ also includes several common RegExps that you may use by merely passing in their name as a string. 

The built-in RegExp names are:
  * `'integer'`: Will match only positive, whole numbers.
  * `'date'`: Will only match dates. (Supports all date formats that can be natively parsed by the `Date.parse()` function.)
  * `'email'`: Matches email addresses.
  * `'usd'`: Matches U.S. Dollar amounts.
  * `'url'`: Matches web-addresses.
  * `'number'`: Matches a number, be it integer or float, positive or negative or in scientific-notation.
  * `'zip'`: Matches an U.S. Postal Code (in both 5 and 9 digit forms).
  * `'phone'`: Matches an U.S. Domestic Phone number.

Notably, if an input does not have a value (i.e. if it would have failed a `require`) it will _automatically_ pass the `match`. `match` is effectively (and by design) not a substitute for `require`.