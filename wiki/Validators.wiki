#summary A Summary of validity's validator functions and their usage.

As we've seen in the GettingStarted page, we can call validator methods on jQuery objects and can also chain those methods in order of importance.

Now we will explore each of the methods in greater detail.

= Require =
====Signature: `jQuery.require( ['message'] )` Returns: jQuery====

===Arguments===
  * `message`: An optional message to display if an element fails.

===Overview===
This is the most basic validation method. It merely checks to ensure that inputs have values. If any do not have a value (i.e. `value.length` is zero) an error is raised for that input and the form will not be submitted. 

Notably, an input that contains only whitespace will pass this validator. If whitespace should be treated as a non-value a `match` validator can be used.

===Examples===
{{{
// Require all inputs, with default error messages.
$("input[type='text']").require();
}}}
{{{
// A specific error message is attached to a specific input.
$("#ssn").require("Your Social Sequrity Number is required to proceed.");
}}}

=Match=
====Signature: `jQuery.match( 'patternName'|RegExp, ['message'] )` Returns: jQuery====

===Arguments===
  * `format`: A named pattern to match against. A list of the named formats that are built into `validity` can be found below.
  * `RegExp`: Instead of a named pattern, you may enter a Regexp object to use for testing the value.
  * `message`: An optional message to display if an element fails.

===Overview===
Tests that the inputs conform to the specified format. This is achieved by passing in a Regexp to match the value against. _validity_ also includes several common Regexps that you may use by merely passing in their name as a string. 

The built-in Regexp names are:
  * `'integer'`: Will match only positive, whole numbers.
  * `'date'`: Will only match dates. (Supports all date formats that can be natively parsed by the `Date.parse()` function.)
  * `'email'`: Matches email addresses.
  * `'usd'`: Matches U.S. Dollar amounts.
  * `'url'`: Matches web-addresses.
  * `'number'`: Matches a number, be it integer or float, positive or negative or in scientific-notation.
  * `'zip'`: Matches an U.S. Postal Code (in both 5 and 9 digit forms).
  * `'phone'`: Matches an U.S. Domestic Phone number.

Notably, if an input does not have a value (i.e. if it would have failed a `require`) it will _automatically_ pass the `match`. `match` is effectively (and by design) not a substitute for `require`.

===Examples===
{{{
// Make sure that all inputs under the 'date' class are properly formatted.(Given they bear a value.)
// If any fail, they will be tagged with a default error message associated with the 'date' pattern.
$('input.date').match('date');
}}}
{{{
// Ensures that an input named 'employeeId' conforms to a special, company-specific pattern,
// and specifies a helpful message.
$('#employeeId').match(/^\d{2}[-]\d{4}$/, "Employee Ids must be in the form XX-XXXX.");
}}}

=Range=
====Signature: `jQuery.range( min, max, ['message'] )` Returns: jQuery====

===Arguments===
  * `min`: The _inclusive_ lower bound for valid values.
  * `max`: The _inclusive_ upper bound for valid values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the value to an _inclusive_ numeric range. This validator assumes that the value is numeric so it should follow a `match`.

If an _exclusive_ range is needed, the `lessThan` and greaterThan` validators can be used in combination.

===Examples===
{{{
$("#percentage").match(/^\d+\.?\d*%?/, "Must be a percent.").range(0, 100, "Not a valid percent.");
}}}

=GreaterThan=
====Signature: `jQuery.greaterThan( min, ['message'] )` Returns: jQuery====

===Arguments===
  * `min`: The _exclusive_ lower bound for valid values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the value to be larger than the specified minimum. This validator assumes that the value is numeric so it should follow a `match`.

===Examples===
{{{
// Validates a cost input, that it must be more than zero.
$("#cost").match("usd").greaterThan(0, "Cost cannot be zero.");
}}}

=GreaterThanOrEqualTo=
====Signature: `jQuery.greaterThanOrEqualTo( min, ['message'] )` Returns: jQuery====

===Arguments===
  * `min`: The _inclusive_ lower bound for valid values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the value to be larger than or equal to the specified minimum. This validator assumes that the value is numeric so it should follow a `match`.

===Examples===
{{{
// Validates a velocity input, that it must be greater than or equal zero.
$("#velocity").match("number").greaterThanOrEqualTo(0, "You cannot have negative velocity.");
}}}

=Less Than=
====Signature: `jQuery.lessThan( max, ['message'] )` Returns: jQuery====

===Arguments===
  * `max`: The _exclusive_ upper bound for valid values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the value to be less than the specified maximum. This validator assumes that the value is numeric so it should follow a `match`.

===Examples===
{{{
$("#angle").lessThan(180, "Angle cannot be greater than 180 degrees.");
}}}

=LessThanOrEqualTo=
====Signature: `jQuery.lessThanOrEqualTo( max, ['message'] )` Returns: jQuery====

===Arguments===
  * `max`: The _inclusive_ upper bound for valid values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the value to be less than or equal to the specified maximum. This validator assumes that the value is numeric so it should follow a `match`.

===Examples===
{{{
$("#hoursPerDay").lessThanOrEqualTo(24, "Cannot be more than twenty-four.");
}}}

=MaxLength=
====Signatire: `jQuery.maxLength( max, ['message'] )` Returns: jQuery====

===Arguments===
  * `max`: The _inclusive_ upper bound for the length of values.
  * `message`: An optional message to display if an element fails.

===Overview===
Restricts the length of the value to the specified maximum. This validator is useful to restrict input values to the max-length allowed by a database schema.

===Examples===
{{{
$("textarea#description").maxLength(255, "Description cannot be longer than 255 characters.");
}}}

=Equal=
====Signature: `jQuery.equal( [transform], ['message'] )` Returns: jQuery====

===Arguments===
  * `transform`: Optional transform to apply to each value before testing.
  * `message`: An optional message to display if an element fails.

===Overview===
Ensure that the values of all matched elements are equal to each other. This is an aggregate validator, meaning that it should be applied to groups of inputs. A common use for the `equal` validator is in password-confirmation scenarios, where a form should not be submitted if a user fails to reenter his or her password correctly.

===Examples===
{{{
// Write a jQuery selector that results in both the password and its confirmation,
// then validate it with 'equal'.
$("text[type='password']").equal("Passwords do not match.");
}}}

{{{
// We can also extract the important part of a value, 
// and test the equality only on that.
// For instance, we might want phone numbers to be equal disregarding whether they
// use '.' or '-' to separate groups, or have the area code in parentheses.
$("input.phone").equal(
    function(val) { 
        return val.replace(/[-.()]/, '');
    },
    "All phone numbers must be the same."
);
}}}

=Distinct=
====Signature: `jQuery.distinct( [transform], ['message'] )` Returns: jQuery====

===Arguments===
  * `transform`: Optional transform to apply to each value before testing.
  * `message`: An optional message to display if an element fails.

===Overview===
Ensure that the values of all matched elements are distinct from each other. In other words, validate that no value is repeated among the matched elements. This is an aggregate validator, meaning that it should be applied to groups of inputs.

If any of the matched elements do not have a value that element will not be tested.

===Examples===
{{{
// Find all the inputs meant to hold Vehicle Identification Numbers.
// Since every VIN should be different, a repeat should be treated as invaid.
$("input.vin").distinct("A VIN Number was repeated.");
}}}

{{{
// We can also use a transform to normalize values.
// For instance, if we wish to ignore case 
// (i.e. if "abc" and "ABC" should be treated as a repeat)
// we can pass in a transform that makes all values upper-case.
// An example of this might be network interface hardware addresses.
$("input.macAddress").distinct(
    function(val) { 
        return val.toUpperCase();
    },
    "A hardware address was repeated."
);
}}}

=Sum=
====Signature: `jQuery.sum( sum, ['message'] )` Returns: jQuery====

===Arguments===
  * `sum`: The value that the sum of matched elements should be equal to.
  * `message`: An optional message to display if an element fails.

===Overview===
Validate that the numeric sum of the value of all matched elements is equal to a given value. If any value is not parseable as a number it will be ignored. This is an aggregate validator, meaning that it should be applied to groups of inputs.

===Examples===
{{{
// Find inputs representing the three interior angles of a triangle.
$("input.triangleAngle")
  .require()
  .match("number")
  .sum(180, "A triangle's angles should add up to 180 degrees.");
}}}

=SumMax=
====Signature: `jQuery.sumMax( max, ['message'] )` Returns: jQuery====

===Arguments===
  * `max`: The value that the sum of matched elements should be less than or equal to.
  * `message`: An optional message to display if an element fails.

===Overview===
The `sumMax` validator works in exactly the same way as `sum` except that values less than the specified max are allowed. This is an aggregate validator, meaning that it should be applied to groups of inputs.

===Examples===
{{{
// Find inputs representing the how you intend to distribute 100,000 dollars among
// several people without having to distribute all of it.
$("input.distribution")
  .match("number")
  .sumMax(100000, "You can't distribute more than you have on hand.");
}}}

=Assert=
====Signature: `jQuery.assert( expression, ['message'] )` Returns: jQuery====

===Arguments===
  * `expression`: A boolean value, where true means valid.
  * `message`: An optional message to display if an element fails.

===Overview===
The `assert` validator method gives you lower-level control over validation. Essentially, it allows you to write the logic of the validation, but allow validity to handle the error message and stopping form submission.

This allows you to do virtually any type of validation that isn't covered in the built-in methods, as well as easily extend validity.

===Examples===
{{{
// Validate based on an existing JavaScript function.
$("#productKey").assert(
  specialSecretProductKeyCheckerFunction($("#productKey").val()),
  "The product key is invalid."
);
}}}

{{{
// Validate based on an Ajax result:
// First define a function that uses a Sychronous Ajax request with Json:
function usernameIsAvailable(username) {
  var isAvailable = false;
  $.ajax({
    url:"/some/url", 
    method:"get",
    async:false,
    success:function(data) { isAvailable = eval('('+data+')'); }
  });
  return isAvailable;
}

// Elsewhere, in the validation function, we can take advantage of this
// function to ensure that a username hasn't been taken already.
$("#username").assert(
  usernameIsAvailable($("#username").val()), 
  "Sorry, that username has already been taken.");
}}}

{{{
// Arbitrarily stop validation:
$("input").assert(false, "You will never be able to submit this form.");
}}}

{{{
// Confirm submittal of form:
$("input").assert(confirm("Have you read the agreement terms?"), "User cancelled.");
}}}