= Philosophy =
Validity was conceived with two main goals in mind:

  # Unobtrusive: Little to no markup requirements, easily setup
  # Customizable: Does not lock you into a look and feel, you get full control over how errors should show up.

The first goal is accomplished by the core of the validity codebase: the validation logic, which is capable of naturally handling complex validation scenarios and halting form submission. However, the system of error messages built on top of that foundation offers you complete customizability.

First of all, you are encouraged to modify the CSS template that ships with validity, you can also select from any of the three built-in output modes: 'label', 'modal' and 'summary'. Furthermore, if these options are insuffiucient for you to customize the the look and feel, you can even write your own output mode as a plugin to validity.

== Editing the CSS ==
When you use validity, you are encouraged to copy the relevant styles from the packaged CSS file and tailor the included styles to your site. Below are summarized the roles of the different styles.

=== Styles used in the 'label' output mode ===
==== 'label.error' ====
Applied to HTML label elements under the 'error' class. These elements are placed immediately after an offending input.

=== Styles used in the 'modal' output mode ===
==== '.validity-modal-msg' ====
Applied to the modal error messages that are positioned near offending inputs. This style should contain the 'position:absolute;' assignment in order for it to be positioned correctly.

==== '.validity-modal-msg:hover' ====
Applied to modal error messages when the cursor hover over them. The style should change to indicate to the user that it can be clicked on (only meaningful if the 'modalErrorsClickable' property is set to true).

=== Styles used in the 'summary' output mode ===
==== '#validity-summary-container' ====
Applied to the element that contains the actual summary (which should be a 'ul'). This style should contain a 'display:none;' assignment. It might also specify a border for the summary.

==== '#validity-summary-output' ====
Applied to the 'ul' element (within the '#validity-summary-container' element) that will contain the validation messages.

== Authoring an Output Mode ==
Writing an output mode is actually relatively simple. Below are the basic steps for accomplishing this:

  # First of all you choose a name for your output mode and assign a new object to the jQuery.validity.outputs object within a Javascript closure. For example, below we create a new output mode with the name 'example':
{{{
(function(){
  jQuery.validity.outputs.example = {

  };
})();
}}}
  # Secondly, you create methods of the new object to specify the behavior of the output mode. All of the five methods are optional. For example.
{{{
(function(){
  jQuery.validity.outputs.example = {
    // The start function is called whenever validation begins.
    // Usually, it should clear out any error messages that are on the page.
    start:function(){ 

    },
      
    // The end function is called when validation concludes.
    // This may be used to flush any buffers that were built up during validation.
    end:function(){ 

    },
    
    // The raise function is called for raising an error message on a single input.
    // '$obj' is a jQuery object representing the input for which the error should be raised.
    // 'msg' is a string of the message to raise.
    raise:function($obj, msg){
        
    },
    
    // The raise function is called for raising an error message on a multiple inputs.
    // '$obj' is a jQuery array representing the inputs for which the error should be raised.
    // 'msg' is a string of the message to raise.
    raiseAggregate:function($obj, msg){ 
        
    },
    
    // The scrollToFirstError function is called to cause the page to move to the first error message.
    // This function is only called at the end of validation and only if the 'scrollTo' option is set to true.
    scrollToFirstError:function(){ 

    }
  };
})();
}}}
  # Lastly fill out the method bodies. Because this definition is in a closure you may specify local variables that are internally accessible to any of the methods. For example, the following is an output mode that will display a summary of errors in an 'alert' message-box. It uses a 'buffer' local variable to store the messages. The closure-scope ensures that this variable will not conflict with anything and is not externally accessible.

Also notice that the 'scrollToFirstError' method is omitted. Since it does not make sense for this output mode and is optional this is fine.
{{{
(function(){
  // This is a buffer that will contain the accumulated error messages throughout a validation session.
  var buffer = [];

  jQuery.validity.outputs.alertSummary = {

    start:function(){ 
      // Starting validation: empty the buffer.
      buffer = [];
    },
    
    end:function(){ 
      // Validation has finished. If there are errors, display them.
      if (buffer.length)
        alert(buffer.join("\n"));
      // And empty the buffer for good measure.
      buffer = [];
    },
    
    raise:function($obj, msg){
      // Add this to the buffer.
      buffer.push(msg);
    },
    
    raiseAggregate:function($obj, msg){ 
      // Add this to the buffer.
      buffer.push(msg);
    },
  };
})();
}}}
  # Lastly, after the installation code has been executed you'll want to activate it with the setup method the same way as for the built-in modes. For example:
{{{
jQuery.validity.setup({ outputMode:'alertSummary' });
}}}