<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" >
    <head>
        <script type="text/javascript" src="jquery.js"></script>
        <script type="text/javascript" src="jquery.validity.js"></script>
        <script type="text/javascript">
            function validatePassword(){
                $.validity.start();
                $("input[type='password']").equal();
                $.validity.end();
            }
        </script>
        
        <link rel="Stylesheet" type="text/css" href="jquery.validity.css" />
        <style type="text/css">
            body {
            	font-family:Arial,Helvetica,Sans-Serif;
            	padding:0;
            	margin:0;
            	background-color:#555;
            	font-size:smaller;}
            
            #main { width:900px; background-color:#bbb; padding:10px; margin: 20px; }
            
            #validity-summary-container { border:solid 1px #f56600; }
        </style>
        
        <title>jQuery.validity Demo</title>
    </head>
    <body>
        <div id='main'>
            <h1>jQuery.validity Demo</h1>
            <h2>Output Mode:</h2>
            <p>
                <i>validity</i> has four 'Output Modes': 'Modal', 'Summary', 'None' and 'Custom'. You will select the output
                mode that is most appropriate for your application, or write your own with the custom output.
                Below, the error summary will appear if an error is encountered and the outputMethod is set to 'Summary'.
                <br />
                [<a href="#_" onclick="$.validity.clear();$.validity.setup({outputMode:'label'});">Set to Label</a>] 
                [<a href="#_" onclick="$.validity.clear();$.validity.setup({outputMode:'modal'});">Set to Modal</a>] 
                [<a href="#_" onclick="$.validity.clear();$.validity.setup({outputMode:'summary'});">Set to Summary</a>]
            </p>
            <div id="validity-summary-container">
                Here's a summary of the validation failures:
                <ul id="validity-summary-output"></ul>
            </div>
            <h2>Validation Functions:</h2>
            <p>
                To use <i>validity</i> you will be writing validation functions. The basic template for a validation
                function is as follows:
            </p>
            <pre>
                function myValidationFunction(){
                    $.validity.start();                         // First we tell validity that 
                                                                // we're going to start validating.
                    
                    // Any of the validity functions called between the start and end functions
                    // will be monitored and the results recorded.
                    // This is where your custom code will go.
                    
                    var result = $.validity.end();              // Now we tell validity that we're
                                                                // done validating and we'd like to
                                                                // know what the results were.
                    
                    return result.valid;                        // The 'valid' property of the result
                                                                // is a boolean representing whether 
                                                                // no failures occurred.
                }
            </pre>
            <p>
                This function is now good to be bound to the 'onsubmit' property of a form, or to be tested
                before a custom Ajax submittal. Here's an example of binding the function to a form:
            </p>
            <pre>
                $("form").bind("submit", myValidationFunction);
            </pre>
            <p>
                Now, whenever that form tries to submit, it will ask the validation function whether it should.
            </p>
            <h2>Requiring Fields:</h2>
            <p>
                Below is a required field. For this demo, its id attribute is set to be 'req'. The 'require' method
                accepts a string of the error to display when an input fails. We validate with the code:
            </p>
            <pre>
                $.validity.start();
                $('#req').require('A Name Is Required.');
                var result = $.validity.end();
            </pre>
            <p>
                Enter Your Name:<input type="text" id='req' name='req' />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#req').require('A Name Is Required.');$.validity.end();" />
            </p>
            <h2>Format Validation:</h2>
            <p>
                Fields can be validated to match a regular expression format using the 'match' method. The following input is 
                validated to only accept either an integer or nothing with the following code:
            </p>
            <pre>
                $.validity.start();
                $('#qty1').match("integer", 'Quantity Must Be Formatted as an Integer.');
                var result = $.validity.end();
            </pre>
            <p>
                Optional: Enter Quantity:<input type="text" id='qty1' name='qty1' />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#qty1').match('integer', 'Quantity Must Be Formatted as an Integer.');$.validity.end();" />
            </p>
            <h2>Chaining:</h2>
            <p>
                You can chain your validator calls to build up a regimen of requirements the values must meet.
                Each validator returns a jQuery object of less or equal count as it was called with. If an input
                failes validation, it is excluded from the jQuery object that is returned. In this way, validators
                only act on inputs that passed validation in every preceding link of the chain.
            </p>
            <pre>
                $.validity.start();
                $('#qty2')
                    .require('Error: A Name Is Required.')
                    .match("integer");
                var result = $.validity.end();
            </pre>
            <p>
                Required: Enter Quantity: <input type="text" id="qty2" name="qty2" />
                <input type="button" value='Validate This Field!' onclick="$.validity.start();$('#qty2').require('Error: A Name Is Required.').match('integer');$.validity.end();" />
            </p>
            <h2>Equality:</h2>
            <p>
                Often, in account registration scenarios, we must check for the eqality of more than one input such as ensuring that a password
                matches its confirmation field. We can do this validation with a jQuery selector that returns all the fields which must be equal
                (in this case only two) and call the AreEqual method. Observe:
            </p>
            <pre>
                $.validity.start();
                $("input[type='password']").equal('Error: Passwords do not match.');
                var result = $.validity.end();
            </pre>
            <p>
                Password:
                <input type="password" id="Pass" name="Pass" />
                Confirm Password:
                <input type="password" id="PassConf" name="PassConf" />
                <input type="button" value="Validate These Fields!" onclick="validatePassword();" />
            </p>
            <h2>Uniqueness:</h2>
            <p>
                The converse to the areEqual method - where no two matched elements have different values - the areNotEqual method will 
                validate that no two elements have the same value. This is useful in situations where repeat values are not allowed. (It
                should be noted that fields where no value is entered will be ignored.) We validate this in much the same way as the 
                AreEqual:
            </p>
            <pre>
                $.validity.start();
                $('input.Name').distinct();
                var result = $.validity.end();
            </pre>
            <p>
                Enter Names: 
                <input id="u1" type="text" class="Name" />&nbsp;
                <input id="u2" type="text" class="Name" />&nbsp;
                <input id="u3" type="text" class="Name" />&nbsp;
                <input id="u4" type="text" class="Name" />&nbsp;
                <input type="button" value="Validate These Fields!" onclick="$.validity.start();$('input.Name').distinct();$.validity.end();" />
            </p>
        </div>
    </body>
</html>
